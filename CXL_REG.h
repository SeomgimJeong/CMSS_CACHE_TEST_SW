// Generated by PeakRDL-cheader - A free and open-source header generator
//  https://github.com/SystemRDL/PeakRDL-cheader

#ifndef CMSS_CACHE_REG
#define CMSS_CACHE_REG

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <assert.h>
#include "xparameters.h"

#define CMSS_CACHE_CFG__VERSION__MICRO_bm 0xffff //11111111 11111111
#define CMSS_CACHE_CFG__VERSION__MICRO_bp 0
#define CMSS_CACHE_CFG__VERSION__MICRO_bw 16
#define CMSS_CACHE_CFG__VERSION__MICRO_reset 0x1
#define CMSS_CACHE_CFG__VERSION__MINOR_bm 0xff0000 // 11111111 00000000 00000000
#define CMSS_CACHE_CFG__VERSION__MINOR_bp 16
#define CMSS_CACHE_CFG__VERSION__MINOR_bw 8
#define CMSS_CACHE_CFG__VERSION__MINOR_reset 0x1
#define CMSS_CACHE_CFG__VERSION__MAJOR_bm 0xff000000 // 11111111 / 00000000 / 00000000 / 00000000
#define CMSS_CACHE_CFG__VERSION__MAJOR_bp 24
#define CMSS_CACHE_CFG__VERSION__MAJOR_bw 8
#define CMSS_CACHE_CFG__VERSION__MAJOR_reset 0x1

#define CMSS_CACHE_CFG__START_ADDR_L__ADDR_bm 0xffffffff
#define CMSS_CACHE_CFG__START_ADDR_L__ADDR_bp 0
#define CMSS_CACHE_CFG__START_ADDR_L__ADDR_bw 32
#define CMSS_CACHE_CFG__START_ADDR_L__ADDR_reset 0x0


#define CMSS_CACHE_CFG__START_ADDR_H__ADDR_bm 0xffffffff
#define CMSS_CACHE_CFG__START_ADDR_H__ADDR_bp 0
#define CMSS_CACHE_CFG__START_ADDR_H__ADDR_bw 32
#define CMSS_CACHE_CFG__START_ADDR_H__ADDR_reset 0x0


#define CMSS_CACHE_CFG__END_ADDR_L__ADDR_bm 0xffffffff
#define CMSS_CACHE_CFG__END_ADDR_L__ADDR_bp 0
#define CMSS_CACHE_CFG__END_ADDR_L__ADDR_bw 32
#define CMSS_CACHE_CFG__END_ADDR_L__ADDR_reset 0x0

#define CMSS_CACHE_CFG__END_ADDR_H__ADDR_bm 0xffffffff
#define CMSS_CACHE_CFG__END_ADDR_H__ADDR_bp 0
#define CMSS_CACHE_CFG__END_ADDR_H__ADDR_bw 32
#define CMSS_CACHE_CFG__END_ADDR_H__ADDR_reset 0x0


#define CMSS_CACHE_CFG__CMD__START_bm 0x1
#define CMSS_CACHE_CFG__CMD__START_bp 0
#define CMSS_CACHE_CFG__CMD__START_bw 1
#define CMSS_CACHE_CFG__CMD__START_reset 0x0


#define CMSS_CACHE_CFG__STATUS__DONE_bm 0x1
#define CMSS_CACHE_CFG__STATUS__DONE_bp 0
#define CMSS_CACHE_CFG__STATUS__DONE_bw 1
#define CMSS_CACHE_CFG__STATUS__DONE_reset 0x0


#define CMSS_CACHE_CFG__DBG_FIFO__STATUS_bm 0xffffffff
#define CMSS_CACHE_CFG__DBG_FIFO__STATUS_bp 0
#define CMSS_CACHE_CFG__DBG_FIFO__STATUS_bw 32
#define CMSS_CACHE_CFG__DBG_FIFO__STATUS_reset 0x0


#define CMSS_CACHE_CFG__DBG_NORMAL_CNT__CNT_bm 0xffff
#define CMSS_CACHE_CFG__DBG_NORMAL_CNT__CNT_bp 0
#define CMSS_CACHE_CFG__DBG_NORMAL_CNT__CNT_bw 16


#define CMSS_CACHE_CFG__DBG_SATUR_CNT__CNT_bm 0xffff
#define CMSS_CACHE_CFG__DBG_SATUR_CNT__CNT_bp 0
#define CMSS_CACHE_CFG__DBG_SATUR_CNT__CNT_bw 16


#define START_ADDRESS  0x4000000000ULL // 64비트 상수
#define END_ADDRESS    0x403FFFFFFFULL
#define COMPLETION_TIMEOUT_MS 1000 // 1초


#define DDR_BASE_ADDR   0x000000000ULL
#define HBM_BASE_ADDR   0x4000000000ULL // 64비트 주소


// Addrmap - CMSS_CACHE_CFG
typedef struct __attribute__ ((__packed__)) {
    uint32_t VERSION;
    uint8_t RESERVED_4_ff[0xfc];
    uint32_t START_ADDR_L;
    uint32_t START_ADDR_H;
    uint32_t END_ADDR_L;
    uint32_t END_ADDR_H;
    uint8_t RESERVED_110_1ff[0xf0];
    uint32_t CMD;
    uint32_t STATUS;
    uint8_t RESERVED_208_fff[0xdf8];
    uint32_t DBG_FIFO[8];
    uint8_t RESERVED_1020_13ff[0x3e0];
    uint32_t DBG_NORMAL_CNT[8];
    uint8_t RESERVED_1420_17ff[0x3e0];
    uint32_t DBG_SATUR_CNT[8];
} CMSS_CACHE_CFG_t;


static_assert(sizeof(CMSS_CACHE_CFG_t) == 0x1820, "Packing error");


int cxl_init(uintptr_t baseaddr, uint64_t start_addr, uint64_t end_addr);

void test_HBM();

void test_DDR();


#ifdef __cplusplus
}
#endif

#endif /* CMSS_CACHE_REG_H */
